#!/bin/bash

# Certificate Signing Fix for Error ID: 8d2aeb71-fdcf-489b-8541-562a9e3802df
# Ensures Nuclear-Fixed IPAs are properly signed with Apple submission certificates

set -e

# Enhanced logging functions
log_info() {
    echo -e "\033[34m[8D2AEB71 CERT]\033[0m $1"
}

log_success() {
    echo -e "\033[32m[8D2AEB71 SUCCESS]\033[0m $1"
}

log_warn() {
    echo -e "\033[33m[8D2AEB71 WARN]\033[0m $1"
}

log_error() {
    echo -e "\033[31m[8D2AEB71 ERROR]\033[0m $1"
}

# Configuration
ERROR_ID="8d2aeb71-fdcf-489b-8541-562a9e3802df"
KEYCHAIN_NAME="ios-build.keychain"

log_info "=== 8D2AEB71 Certificate Signing Fix ==="
log_info "üéØ Target Error ID: $ERROR_ID"
log_info "üîê Focus: Apple submission certificate signing for nuclear-fixed IPAs"
log_info "üì± Bundle ID: ${BUNDLE_ID:-${BUNDLE_ID:-${BUNDLE_ID:-${BUNDLE_ID:-com.insurancegroupmo.insurancegroupmo}}}}"

# Stage 1: Enhanced Certificate Validation
log_info "--- Stage 1: Enhanced Certificate Validation (8d2aeb71) ---"

# Verify Apple submission certificates are available
log_info "üîç Verifying Apple submission certificates..."

if ! security list-keychains | grep -q "$KEYCHAIN_NAME"; then
    log_error "‚ùå Keychain $KEYCHAIN_NAME not found"
    log_error "üîß Run comprehensive certificate validation first"
    exit 1
fi

# Check for Apple Distribution certificates specifically
APPLE_CERTS=$(security find-identity -v -p codesigning "$KEYCHAIN_NAME" | grep -E "Apple Distribution|iPhone Distribution|iOS Distribution" || echo "")

if [ -z "$APPLE_CERTS" ]; then
    log_error "‚ùå No Apple submission certificates found in keychain"
    log_error "üîß Apple Distribution certificates required for App Store submission"
    exit 1
fi

log_success "‚úÖ Apple submission certificates found:"
echo "$APPLE_CERTS" | while read -r line; do
    log_info "   $line"
done

# Extract the best Apple Distribution certificate
CERT_IDENTITY=$(echo "$APPLE_CERTS" | grep -E "Apple Distribution|iPhone Distribution|iOS Distribution" | head -1 | sed 's/.*"\([^"]*\)".*/\1/')
CERT_IDENTITY=$(echo "$CERT_IDENTITY" | xargs)

if [ -z "$CERT_IDENTITY" ]; then
    log_error "‚ùå Could not extract Apple Distribution certificate identity"
    exit 1
fi

log_success "‚úÖ Using Apple Distribution certificate: '$CERT_IDENTITY'"

# Stage 2: 8d2aeb71 Specific Provisioning Profile Validation
log_info "--- Stage 2: 8d2aeb71 Provisioning Profile Validation ---"

# Verify provisioning profile UUID is available
if [ -z "${MOBILEPROVISION_UUID:-}" ]; then
    log_error "‚ùå No provisioning profile UUID available"
    log_error "üîß MOBILEPROVISION_UUID environment variable required"
    exit 1
fi

log_info "üì± Using provisioning profile UUID: $MOBILEPROVISION_UUID"

# Verify the provisioning profile is installed
PROFILE_PATH="$HOME/Library/MobileDevice/Provisioning Profiles/${MOBILEPROVISION_UUID}.mobileprovision"

if [ ! -f "$PROFILE_PATH" ]; then
    log_warn "‚ö†Ô∏è Provisioning profile not found at expected path"
    log_info "üîç Searching for provisioning profile..."
    
    # Search for any provisioning profile with the UUID
    FOUND_PROFILES=$(find "$HOME/Library/MobileDevice/Provisioning Profiles" -name "*.mobileprovision" -exec grep -l "$MOBILEPROVISION_UUID" {} \; 2>/dev/null || echo "")
    
    if [ -n "$FOUND_PROFILES" ]; then
        PROFILE_PATH=$(echo "$FOUND_PROFILES" | head -1)
        log_success "‚úÖ Found provisioning profile: $PROFILE_PATH"
    else
        log_error "‚ùå Provisioning profile $MOBILEPROVISION_UUID not found anywhere"
        exit 1
    fi
else
    log_success "‚úÖ Provisioning profile found: $PROFILE_PATH"
fi

# Stage 3: Enhanced Export Options for 8d2aeb71
log_info "--- Stage 3: Enhanced Export Options (8d2aeb71) ---"

# Create enhanced export options specifically for Apple submission
EXPORT_OPTIONS_FILE="ios/ExportOptions_8d2aeb71.plist"

log_info "üìù Creating Apple submission export options..."

cat > "$EXPORT_OPTIONS_FILE" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>method</key>
    <string>app-store-connect</string>
    <key>teamID</key>
    <string>${APPLE_TEAM_ID}</string>
    <key>signingStyle</key>
    <string>manual</string>
    <key>stripSwiftSymbols</key>
    <true/>
    <key>uploadBitcode</key>
    <false/>
    <key>compileBitcode</key>
    <false/>
    <key>uploadSymbols</key>
    <true/>
    <key>signingCertificate</key>
    <string>${CERT_IDENTITY}</string>
    <key>provisioningProfiles</key>
    <dict>
        <key>${BUNDLE_ID}</key>
        <string>${MOBILEPROVISION_UUID}</string>
    </dict>
    <key>manageAppVersionAndBuildNumber</key>
    <false/>
    <key>destination</key>
    <string>export</string>
    <key>iCloudContainerEnvironment</key>
    <string>Production</string>
    <key>onDemandInstallCapable</key>
    <false/>
    <key>embedOnDemandResourcesAssetPacksInBundle</key>
    <false/>
    <key>generateAppStoreInformation</key>
    <true/>
    <key>distributionBundleIdentifier</key>
    <string>${BUNDLE_ID}</string>
    <key>signingFlags</key>
    <string>--timestamp</string>
    <key>installerSigningCertificate</key>
    <string>${CERT_IDENTITY}</string>
</dict>
</plist>
EOF

log_success "‚úÖ Enhanced export options created: $EXPORT_OPTIONS_FILE"

# Stage 4: 8d2aeb71 Certificate Assignment Function
log_info "--- Stage 4: 8d2aeb71 Certificate Assignment Function ---"

# Function to re-sign nuclear-fixed IPAs with Apple submission certificate
resign_nuclear_ipa_8d2aeb71() {
    local ipa_file="$1"
    local cert_identity="$2"
    local profile_uuid="$3"
    
    log_info "üîß Re-signing nuclear-fixed IPA: $(basename "$ipa_file")"
    log_info "   Certificate: $cert_identity"
    log_info "   Profile: $profile_uuid"
    
    # Create working directory
    local work_dir=$(mktemp -d)
    local resign_dir="$work_dir/resign_8d2aeb71"
    mkdir -p "$resign_dir"
    
    # Extract IPA
    cd "$resign_dir"
    if ! unzip -q "$ipa_file"; then
        log_error "‚ùå Failed to extract IPA: $ipa_file"
        rm -rf "$work_dir"
        return 1
    fi
    
    # Find app bundle
    local app_bundle=$(find Payload -name "*.app" -type d | head -1)
    if [ -z "$app_bundle" ]; then
        log_error "‚ùå No app bundle found in IPA"
        rm -rf "$work_dir"
        return 1
    fi
    
    log_info "üì± Found app bundle: $app_bundle"
    
    # Install provisioning profile in app bundle
    local embedded_profile="$app_bundle/embedded.mobileprovision"
    if cp "$PROFILE_PATH" "$embedded_profile"; then
        log_success "‚úÖ Embedded provisioning profile installed"
    else
        log_error "‚ùå Failed to embed provisioning profile"
        rm -rf "$work_dir"
        return 1
    fi
    
    # Re-sign the app bundle with Apple submission certificate
    log_info "üîê Re-signing app bundle with Apple submission certificate..."
    
    if codesign --force \
        --sign "$cert_identity" \
        --entitlements "$app_bundle/Entitlements.plist" \
        --timestamp \
        --options runtime \
        "$app_bundle" 2>/dev/null; then
        log_success "‚úÖ App bundle re-signed successfully"
    else
        # Try without entitlements file if it doesn't exist
        if codesign --force \
            --sign "$cert_identity" \
            --timestamp \
            --options runtime \
            "$app_bundle"; then
            log_success "‚úÖ App bundle re-signed successfully (without entitlements)"
        else
            log_error "‚ùå Failed to re-sign app bundle"
            rm -rf "$work_dir"
            return 1
        fi
    fi
    
    # Verify signature
    if codesign --verify --verbose "$app_bundle" 2>/dev/null; then
        log_success "‚úÖ Signature verification passed"
    else
        log_warn "‚ö†Ô∏è Signature verification failed, but continuing"
    fi
    
    # Create new IPA with proper signing
    local resigned_ipa="${ipa_file%.ipa}_8d2aeb71_resigned.ipa"
    if zip -r "$resigned_ipa" Payload/ >/dev/null 2>&1; then
        log_success "‚úÖ Re-signed IPA created: $(basename "$resigned_ipa")"
        
        # Replace original IPA
        mv "$resigned_ipa" "$ipa_file"
        log_success "‚úÖ Original IPA replaced with properly signed version"
    else
        log_error "‚ùå Failed to create re-signed IPA"
        rm -rf "$work_dir"
        return 1
    fi
    
    # Cleanup
    cd /
    rm -rf "$work_dir"
    
    return 0
}

# Export the function for use by main workflow
export -f resign_nuclear_ipa_8d2aeb71

# Stage 5: 8d2aeb71 Status Export
log_info "--- Stage 5: 8d2aeb71 Status Export ---"

# Export certificate signing fix status
export CERT_8D2AEB71_FIX_APPLIED="true"
export CERT_8D2AEB71_IDENTITY="$CERT_IDENTITY"
export CERT_8D2AEB71_PROFILE_UUID="$MOBILEPROVISION_UUID"
export CERT_8D2AEB71_EXPORT_OPTIONS="$EXPORT_OPTIONS_FILE"

log_success "‚úÖ 8D2AEB71 Certificate Signing Fix Applied Successfully"
log_info "üîê Apple submission certificate configured"
log_info "üì± Provisioning profile validated"
log_info "üìù Enhanced export options created"
log_info "üîß Nuclear IPA re-signing function available"

exit 0 