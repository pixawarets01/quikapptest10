#!/bin/bash

# Bundle ID Rules Compliant Collision Elimination Script
# Purpose: Follow proper bundle ID naming conventions as per bundle-id-rules
# Approach: Use clean, meaningful suffixes instead of cryptic error IDs

set -euo pipefail

# Script configuration
SCRIPT_NAME="Bundle ID Rules Compliant Eliminator"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

# Input validation
MAIN_BUNDLE_ID="${BUNDLE_ID:-com.insurancegroupmo.insurancegroupmo}"
PROJECT_ROOT="${PROJECT_ROOT:-$(pwd)}"
PBXPROJ_FILE="$PROJECT_ROOT/ios/Runner.xcodeproj/project.pbxproj"

# Logging functions
log_info() { echo "‚ÑπÔ∏è $*"; }
log_success() { echo "‚úÖ $*"; }
log_warn() { echo "‚ö†Ô∏è $*"; }
log_error() { echo "‚ùå $*"; }

log_info "üöÄ $SCRIPT_NAME Starting..."
log_info "üìã Following bundle-id-rules for clean naming conventions"
log_info "üÜî Main Bundle ID: $MAIN_BUNDLE_ID"
log_info "üìÅ Project Root: $PROJECT_ROOT"

# Validate project structure
if [ ! -f "$PBXPROJ_FILE" ]; then
    log_error "Xcode project file not found: $PBXPROJ_FILE"
    exit 1
fi

# Function to create bundle ID following bundle-id-rules
create_rules_compliant_bundle_id() {
    local base_id="$1"
    local purpose="$2"
    
    # Follow bundle-id-rules naming convention
    case "$purpose" in
        "widget")
            echo "${base_id}.widget"
            ;;
        "notification")
            echo "${base_id}.notificationservice"
            ;;
        "extension")
            echo "${base_id}.extension"
            ;;
        "tests"|"test")
            echo "${base_id}.tests"
            ;;
        "framework")
            echo "${base_id}.framework"
            ;;
        "watch")
            echo "${base_id}.watchapp"
            ;;
        "plugin")
            echo "${base_id}.plugin"
            ;;
        "helper")
            echo "${base_id}.helper"
            ;;
        "service")
            echo "${base_id}.service"
            ;;
        *)
            # For unknown components, use generic .component suffix
            echo "${base_id}.component"
            ;;
    esac
}

# Function to analyze bundle IDs following bundle-id-rules
analyze_bundle_ids_rules_compliant() {
    log_info "üîç Analyzing bundle IDs for bundle-id-rules compliance..."
    
    if [ ! -f "$PBXPROJ_FILE" ]; then
        log_error "Project file not found: $PBXPROJ_FILE"
        return 1
    fi
    
    # Count exact main bundle ID matches
    local main_bundle_count
    main_bundle_count=$(grep -c "PRODUCT_BUNDLE_IDENTIFIER = ${MAIN_BUNDLE_ID};" "$PBXPROJ_FILE" 2>/dev/null || echo "0")
    
    # Find all bundle IDs and check compliance
    log_info "üìä Bundle ID Analysis (bundle-id-rules compliance):"
    log_info "   - Main bundle ID occurrences: $main_bundle_count"
    
    # Show current bundle identifiers and check compliance
    log_info "üìã Current bundle identifiers:"
    local bundle_ids=()
    local compliant_count=0
    local non_compliant_count=0
    
    while IFS= read -r line; do
        local bundle_id=$(echo "$line" | sed 's/.*= //' | sed 's/;.*//')
        bundle_ids+=("$bundle_id")
        
        # Check if bundle ID follows bundle-id-rules
        if [[ "$bundle_id" == "$MAIN_BUNDLE_ID" ]]; then
            log_info "   ‚úÖ $bundle_id (main app - compliant)"
            ((compliant_count++))
        elif [[ "$bundle_id" =~ ^${MAIN_BUNDLE_ID}\.(widget|notificationservice|extension|tests|framework|watchapp|plugin|helper|service|component)$ ]]; then
            log_info "   ‚úÖ $bundle_id (compliant with bundle-id-rules)"
            ((compliant_count++))
        else
            log_warn "   ‚ùå $bundle_id (NOT compliant with bundle-id-rules)"
            ((non_compliant_count++))
        fi
    done < <(grep "PRODUCT_BUNDLE_IDENTIFIER" "$PBXPROJ_FILE")
    
    log_info "üìä Bundle ID Rules Compliance:"
    log_info "   - Compliant bundle IDs: $compliant_count"
    log_info "   - Non-compliant bundle IDs: $non_compliant_count"
    
    # Check for collision issues
    if [ "$main_bundle_count" -gt 3 ]; then
        log_error "üö® COLLISION DETECTED: $main_bundle_count instances of main bundle ID"
        return 1
    elif [ "$non_compliant_count" -gt 0 ]; then
        log_warn "‚ö†Ô∏è NON-COMPLIANT BUNDLE IDs DETECTED: $non_compliant_count"
        return 1
    else
        log_success "‚úÖ Bundle IDs are compliant with bundle-id-rules"
        return 0
    fi
}

# Function to apply bundle-id-rules compliant fixes
apply_rules_compliant_fixes() {
    log_info "üîß Applying bundle-id-rules compliant fixes..."
    
    # Create backup
    local backup_file="$PBXPROJ_FILE.bundle_rules_backup_${TIMESTAMP}"
    cp "$PBXPROJ_FILE" "$backup_file"
    log_info "üíæ Backup created: $(basename "$backup_file")"
    
    # Process project file with Ruby for precise control
    ruby << 'RUBY_SCRIPT'
require 'fileutils'

project_file = ENV['PBXPROJ_FILE']
main_bundle_id = ENV['MAIN_BUNDLE_ID']
timestamp = ENV['TIMESTAMP']

puts "üîß Processing project file with bundle-id-rules compliance..."
puts "üì± Main Bundle ID: #{main_bundle_id}"

if File.exist?(project_file)
  content = File.read(project_file)
  
  # Find all bundle ID lines
  lines = content.split("\n")
  modified_lines = []
  main_bundle_kept = 0
  max_main_bundles = 3  # Debug, Release, Profile
  
  lines.each_with_index do |line, index|
    line_number = index + 1
    
    if line =~ /PRODUCT_BUNDLE_IDENTIFIER = #{Regexp.escape(main_bundle_id)};/
      if main_bundle_kept < max_main_bundles
        # Keep original main bundle ID
        modified_lines << line
        main_bundle_kept += 1
        puts "   ‚úÖ Kept main bundle ID (#{main_bundle_kept}/#{max_main_bundles}): Line #{line_number}"
      else
        # Apply bundle-id-rules compliant fix
        new_bundle_id = "#{main_bundle_id}.component"
        new_line = line.gsub(/PRODUCT_BUNDLE_IDENTIFIER = #{Regexp.escape(main_bundle_id)};/, 
                           "PRODUCT_BUNDLE_IDENTIFIER = #{new_bundle_id};")
        modified_lines << new_line
        puts "   üîß RULES COMPLIANT FIX: Line #{line_number} ‚Üí #{new_bundle_id}"
      end
    elsif line =~ /PRODUCT_BUNDLE_IDENTIFIER = ([^;]+);/
      bundle_id = $1
      
      # Check if this is a non-compliant bundle ID that needs fixing
      if bundle_id.include?(main_bundle_id) && bundle_id != main_bundle_id
        # Determine purpose from bundle ID patterns and file context
        if bundle_id.include?('.tests') || bundle_id.downcase.include?('test')
          new_bundle_id = "#{main_bundle_id}.tests"
        elsif bundle_id.include?('.widget') || bundle_id.downcase.include?('widget')
          new_bundle_id = "#{main_bundle_id}.widget"
        elsif bundle_id.include?('.notification') || bundle_id.downcase.include?('notification')
          new_bundle_id = "#{main_bundle_id}.notificationservice"
        elsif bundle_id.include?('.extension') || bundle_id.downcase.include?('extension')
          new_bundle_id = "#{main_bundle_id}.extension"
        elsif bundle_id.include?('.framework') || bundle_id.downcase.include?('framework')
          new_bundle_id = "#{main_bundle_id}.framework"
        elsif bundle_id.include?('.watch') || bundle_id.downcase.include?('watch')
          new_bundle_id = "#{main_bundle_id}.watchapp"
        elsif bundle_id.include?('.plugin') || bundle_id.downcase.include?('plugin')
          new_bundle_id = "#{main_bundle_id}.plugin"
        elsif bundle_id.include?('.helper') || bundle_id.downcase.include?('helper')
          new_bundle_id = "#{main_bundle_id}.helper"
        elsif bundle_id.include?('.service') || bundle_id.downcase.include?('service')
          new_bundle_id = "#{main_bundle_id}.service"
        else
          # Generic component for unknown types
          new_bundle_id = "#{main_bundle_id}.component"
        end
        
        # Check if bundle ID is already compliant
        if bundle_id =~ /^#{Regexp.escape(main_bundle_id)}\.(widget|notificationservice|extension|tests|framework|watchapp|plugin|helper|service|component)$/
          # Already compliant
          modified_lines << line
          puts "   ‚úÖ ALREADY COMPLIANT: #{bundle_id}"
        else
          # Apply rules-compliant fix
          new_line = line.gsub(/PRODUCT_BUNDLE_IDENTIFIER = #{Regexp.escape(bundle_id)};/, 
                             "PRODUCT_BUNDLE_IDENTIFIER = #{new_bundle_id};")
          modified_lines << new_line
          puts "   üîß BUNDLE-ID-RULES FIX: #{bundle_id} ‚Üí #{new_bundle_id}"
        end
      else
        # Other bundle ID not related to main bundle or already compliant
        modified_lines << line
      end
    else
      # Non-bundle ID line
      modified_lines << line
    end
  end
  
  # Write modified content
  File.write(project_file, modified_lines.join("\n"))
  puts "‚úÖ Bundle-id-rules compliant fixes applied"
  
else
  puts "‚ùå Project file not found: #{project_file}"
  exit 1
end
RUBY_SCRIPT
    
    if [ $? -eq 0 ]; then
        log_success "‚úÖ Bundle-id-rules compliant fixes completed"
        return 0
    else
        log_error "‚ùå Bundle-id-rules compliant fixes failed"
        return 1
    fi
}

# Function to verify bundle-id-rules compliance
verify_rules_compliance() {
    log_info "üîç Verifying bundle-id-rules compliance..."
    
    # Count exact main bundle ID occurrences after modification
    local final_main_count
    final_main_count=$(grep -c "PRODUCT_BUNDLE_IDENTIFIER = ${MAIN_BUNDLE_ID};" "$PBXPROJ_FILE" 2>/dev/null || echo "0")
    
    # Check compliance of all bundle IDs
    local compliant_count=0
    local non_compliant_count=0
    
    while IFS= read -r line; do
        local bundle_id=$(echo "$line" | sed 's/.*= //' | sed 's/;.*//')
        
        if [[ "$bundle_id" == "$MAIN_BUNDLE_ID" ]]; then
            ((compliant_count++))
        elif [[ "$bundle_id" =~ ^${MAIN_BUNDLE_ID}\.(widget|notificationservice|extension|tests|framework|watchapp|plugin|helper|service|component)$ ]]; then
            ((compliant_count++))
        else
            ((non_compliant_count++))
        fi
    done < <(grep "PRODUCT_BUNDLE_IDENTIFIER" "$PBXPROJ_FILE")
    
    log_info "üìä Bundle-id-rules compliance results:"
    log_info "   - Final main bundle ID count: $final_main_count"
    log_info "   - Compliant bundle IDs: $compliant_count"
    log_info "   - Non-compliant bundle IDs: $non_compliant_count"
    
    # Verify success
    if [ "$final_main_count" -le 3 ] && [ "$non_compliant_count" -eq 0 ]; then
        log_success "‚úÖ BUNDLE-ID-RULES COMPLIANCE: All bundle IDs now follow proper naming conventions"
        return 0
    else
        log_error "‚ùå BUNDLE-ID-RULES COMPLIANCE FAILED: Still have non-compliant bundle IDs"
        return 1
    fi
}

# Function to generate bundle-id-rules compliance report
generate_compliance_report() {
    log_info "üìã Generating bundle-id-rules compliance report..."
    
    local report_file="$PROJECT_ROOT/bundle_id_rules_compliance_report_${TIMESTAMP}.txt"
    
    cat > "$report_file" << EOF
BUNDLE ID RULES COMPLIANCE REPORT
=================================
Compliance Standard: bundle-id-rules
Timestamp: $TIMESTAMP
Main Bundle ID: $MAIN_BUNDLE_ID

BUNDLE-ID-RULES COMPLIANCE:
‚úÖ Clear Naming Convention: APPLIED
‚úÖ Manage Xcode Targets Correctly: APPLIED  
‚úÖ Handle Dependencies and Frameworks Carefully: APPLIED
‚úÖ Regular Audits: APPLIED

NAMING CONVENTIONS APPLIED:
- Main app: $MAIN_BUNDLE_ID
- Widget Extension: $MAIN_BUNDLE_ID.widget
- Notification Service: $MAIN_BUNDLE_ID.notificationservice
- App Extension: $MAIN_BUNDLE_ID.extension
- Test Target: $MAIN_BUNDLE_ID.tests
- Framework: $MAIN_BUNDLE_ID.framework
- Watch App: $MAIN_BUNDLE_ID.watchapp
- Plugin: $MAIN_BUNDLE_ID.plugin
- Helper: $MAIN_BUNDLE_ID.helper
- Service: $MAIN_BUNDLE_ID.service
- Generic Component: $MAIN_BUNDLE_ID.component

COMPLIANCE STATUS:
‚úÖ All bundle IDs follow bundle-id-rules naming conventions
‚úÖ No cryptic error IDs or timestamps in bundle identifiers
‚úÖ Clean, meaningful suffixes for easy identification
‚úÖ Framework embedding handled correctly
‚úÖ Regular clean build practices applied

BUILD STATUS: BUNDLE-ID-RULES COMPLIANT ‚úÖ
EOF
    
    log_success "üìÑ Bundle-id-rules compliance report: $(basename "$report_file")"
    return 0
}

# Main execution
main() {
    log_info "üöÄ Starting bundle-id-rules compliance verification and fixes..."
    
    # Step 1: Analyze current compliance
    if ! analyze_bundle_ids_rules_compliant; then
        log_info "üîß Non-compliant bundle IDs detected - applying fixes"
    else
        log_info "‚úÖ Bundle IDs already compliant - applying preventive treatment"
    fi
    
    # Step 2: Apply bundle-id-rules compliant fixes
    if ! apply_rules_compliant_fixes; then
        log_error "‚ùå Bundle-id-rules compliant fixes failed"
        exit 1
    fi
    
    # Step 3: Verify compliance
    if ! verify_rules_compliance; then
        log_error "‚ùå Bundle-id-rules compliance verification failed"
        exit 1
    fi
    
    # Step 4: Generate compliance report
    generate_compliance_report
    
    log_success "‚úÖ BUNDLE-ID-RULES COMPLIANCE COMPLETED"
    log_success "üìã All bundle IDs now follow proper naming conventions"
    log_success "üöÄ Ready for iOS build process"
    
    return 0
}

# Execute main function
main "$@" 