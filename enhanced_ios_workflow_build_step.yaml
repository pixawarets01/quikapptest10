  - name: üõ°Ô∏è Enhanced iOS Build with Error Handling
    script: |
      echo "üõ°Ô∏è Starting Enhanced iOS Build with Comprehensive Error Handling"
      echo "üìä Build Configuration:"
      echo "  - Bundle ID: $BUNDLE_ID"
      echo "  - Profile Type: $PROFILE_TYPE"
      echo "  - App Name: $APP_NAME"
      echo "  - Build Date: $(date)"
      echo ""
      
      # Initialize enhanced error handling
      echo "üîß Initializing enhanced error handling system..."
      source lib/scripts/ios/enhanced_error_handler.sh
      lib/scripts/ios/enhanced_error_handler.sh --init
      
      # Validate build environment
      echo "üîç Validating build environment..."
      if ! validate_environment; then
        echo "‚ùå Environment validation failed"
        lib/scripts/ios/enhanced_error_handler.sh --report 1
        exit 1
      fi
      
      # Create output directory
      mkdir -p output/ios
      
      # Enhanced error handling for build process
      echo ""
      echo "üöÄ STARTING ENHANCED BUILD PROCESS"
      echo "================================="
      
      # Phase 1: Flutter Dependencies
      echo ""
      echo "üì¶ Phase 1: Flutter Dependencies"
      if ! execute_with_retry "flutter clean && flutter pub get" "Flutter Dependencies"; then
        echo "‚ùå Flutter dependencies phase failed"
        lib/scripts/ios/enhanced_error_handler.sh --report 1
        exit 1
      fi
      
      # Phase 2: CocoaPods Dependencies
      echo ""
      echo "üçÉ Phase 2: CocoaPods Dependencies"
      cd ios
      if ! execute_with_retry "pod install --repo-update" "CocoaPods Installation"; then
        echo "‚ùå CocoaPods phase failed"
        cd ..
        lib/scripts/ios/enhanced_error_handler.sh --report 1
        exit 1
      fi
      cd ..
      
      # Phase 3: iOS Build
      echo ""
      echo "üèóÔ∏è Phase 3: iOS Build"
      
      # Prepare build command based on profile type
      case "$PROFILE_TYPE" in
        "app-store")
          BUILD_CMD="flutter build ipa --release --export-options-plist=ios/ExportOptions.plist"
          ;;
        "ad-hoc")
          BUILD_CMD="flutter build ipa --release --export-options-plist=ios/ExportOptions.plist"
          ;;
        "enterprise")
          BUILD_CMD="flutter build ipa --release --export-options-plist=ios/ExportOptions.plist"
          ;;
        "development")
          BUILD_CMD="flutter build ipa --debug --export-options-plist=ios/ExportOptions.plist"
          ;;
        *)
          BUILD_CMD="flutter build ipa --release"
          ;;
      esac
      
      echo "üìã Build Command: $BUILD_CMD"
      
      if ! execute_with_retry "$BUILD_CMD" "iOS Build"; then
        echo "‚ùå iOS build phase failed"
        
        # Attempt alternative build methods
        echo "üîÑ Attempting alternative build methods..."
        
        # Alternative 1: Build without export options
        echo "üîÑ Alternative 1: Build without export options"
        if execute_with_retry "flutter build ipa --release" "iOS Build (Alternative 1)"; then
          echo "‚úÖ Alternative build method 1 succeeded"
        else
          # Alternative 2: Build archive only
          echo "üîÑ Alternative 2: Build archive only"
          if execute_with_retry "flutter build ios --release" "iOS Archive Build"; then
            echo "‚úÖ Alternative build method 2 succeeded (archive only)"
            echo "üì¶ Archive created, will attempt manual IPA export"
          else
            echo "‚ùå All build methods failed"
            lib/scripts/ios/enhanced_error_handler.sh --report 1
            exit 1
          fi
        fi
      fi
      
      # Phase 4: IPA Location and Validation
      echo ""
      echo "üì¶ Phase 4: IPA Location and Validation"
      
      # Find and validate IPAs
      echo "üîç Searching for built IPAs..."
      
      # Define potential IPA locations
      IPA_LOCATIONS=(
        "build/ios/ipa/Runner.ipa"
        "build/ios/ipa/*.ipa"
        "ios/build/Runner.ipa"
        "ios/build/*.ipa"
      )
      
      FOUND_IPAS=()
      for location in "${IPA_LOCATIONS[@]}"; do
        for ipa in $location; do
          if [ -f "$ipa" ]; then
            echo "üì¶ Found IPA: $ipa"
            FOUND_IPAS+=("$ipa")
          fi
        done
      done
      
      if [ ${#FOUND_IPAS[@]} -eq 0 ]; then
        echo "‚ö†Ô∏è No IPA files found, checking for archive..."
        
        # Look for xcarchive
        ARCHIVE_LOCATIONS=(
          "ios/build/Runner.xcarchive"
          "ios/build/*.xcarchive"
          "build/ios/archive/*.xcarchive"
        )
        
        FOUND_ARCHIVES=()
        for location in "${ARCHIVE_LOCATIONS[@]}"; do
          for archive in $location; do
            if [ -d "$archive" ]; then
              echo "üì¶ Found Archive: $archive"
              FOUND_ARCHIVES+=("$archive")
            fi
          done
        done
        
        if [ ${#FOUND_ARCHIVES[@]} -gt 0 ]; then
          echo "üîÑ Attempting to export IPA from archive..."
          BEST_ARCHIVE="${FOUND_ARCHIVES[0]}"
          
          # Create ExportOptions.plist if it doesn't exist
          if [ ! -f "ios/ExportOptions.plist" ]; then
            echo "üìù Creating ExportOptions.plist for $PROFILE_TYPE"
            cat > ios/ExportOptions.plist << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>method</key>
    <string>$PROFILE_TYPE</string>
    <key>teamID</key>
    <string>$APPLE_TEAM_ID</string>
    <key>uploadBitcode</key>
    <false/>
    <key>uploadSymbols</key>
    <true/>
    <key>compileBitcode</key>
    <false/>
</dict>
</plist>
EOF
          fi
          
          # Export IPA from archive
          EXPORT_CMD="xcodebuild -exportArchive -archivePath \"$BEST_ARCHIVE\" -exportPath output/ios/ -exportOptionsPlist ios/ExportOptions.plist"
          
          if execute_with_retry "$EXPORT_CMD" "IPA Export from Archive"; then
            echo "‚úÖ IPA exported successfully from archive"
            # Look for exported IPA
            for ipa in output/ios/*.ipa; do
              if [ -f "$ipa" ]; then
                FOUND_IPAS+=("$ipa")
              fi
            done
          else
            echo "‚ùå Failed to export IPA from archive"
          fi
        fi
      fi
      
      # Copy IPAs to output directory
      if [ ${#FOUND_IPAS[@]} -gt 0 ]; then
        echo "üì¶ Copying IPAs to output directory..."
        for ipa in "${FOUND_IPAS[@]}"; do
          cp "$ipa" output/ios/ 2>/dev/null || true
          echo "‚úÖ Copied: $(basename "$ipa")"
        done
      else
        echo "‚ùå No IPAs or archives found"
        lib/scripts/ios/enhanced_error_handler.sh --report 1
        exit 1
      fi
      
      # Phase 5: Enhanced IPA Upload (if app-store profile)
      if [ "$PROFILE_TYPE" = "app-store" ]; then
        echo ""
        echo "üì§ Phase 5: Enhanced IPA Upload to App Store Connect"
        
        # Check if upload is enabled
        if [ "${IS_TESTFLIGHT:-true}" = "true" ] || [ "${SUBMIT_TO_TESTFLIGHT:-true}" = "true" ]; then
          echo "üöÄ TestFlight upload enabled, proceeding with upload..."
          
          # Use enhanced upload handler
          if lib/scripts/ios/enhanced_ipa_upload_handler.sh --upload; then
            echo "‚úÖ IPA upload completed successfully"
          else
            echo "‚ùå IPA upload failed"
            echo "üìã Upload will be attempted again in post-processing"
          fi
        else
          echo "‚ÑπÔ∏è TestFlight upload disabled, skipping upload"
        fi
      else
        echo "‚ÑπÔ∏è Profile type is $PROFILE_TYPE, skipping App Store Connect upload"
      fi
      
      # Phase 6: Build Summary
      echo ""
      echo "üìä Phase 6: Build Summary"
      
      # Generate comprehensive build report
      echo "üìã BUILD SUMMARY:"
      echo "  - Build Status: SUCCESS"
      echo "  - Profile Type: $PROFILE_TYPE"
      echo "  - Bundle ID: $BUNDLE_ID"
      echo "  - IPAs Found: ${#FOUND_IPAS[@]}"
      echo "  - Archives Found: ${#FOUND_ARCHIVES[@]}"
      
      # List all artifacts
      echo ""
      echo "üì¶ AVAILABLE ARTIFACTS:"
      if [ -d "output/ios" ]; then
        find output/ios -name "*.ipa" -o -name "*.xcarchive" -o -name "*.dSYM" | while read -r artifact; do
          if [ -f "$artifact" ] || [ -d "$artifact" ]; then
            size=$(du -h "$artifact" | cut -f1)
            echo "  üìÑ $(basename "$artifact"): $size"
          fi
        done
      fi
      
      if [ -d "build/ios/ipa" ]; then
        find build/ios/ipa -name "*.ipa" | while read -r artifact; do
          if [ -f "$artifact" ]; then
            size=$(du -h "$artifact" | cut -f1)
            echo "  üìÑ $(basename "$artifact"): $size"
          fi
        done
      fi
      
      # Generate final error report
      lib/scripts/ios/enhanced_error_handler.sh --report 0
      
      echo ""
      echo "‚úÖ Enhanced iOS Build completed successfully!"
      echo "üéâ Build artifacts are ready for distribution" 